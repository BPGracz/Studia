<?xml version="1.0" encoding="UTF-8"?><JavaBlocks author="BPGracz" scriptEngine="JavaScript" version="6010">
  <option fullConnectorValues="true" grid="false" pascal="false"/>
  <flowchart name="Start">
    <canvas interval="200" posX="-57.347473" posY="14.518135" zoom="5"/>
    <blocks>
      <block id="1" name="Start" type="START">
        <options displayComment="true"/>
        <visual color="255 255 0" posX="-280.0" posY="-280.0"/>
        <comment>Start</comment>
        <connect ID="3"/>
      </block>
      <block id="2" type="RETURN">
        <options displayComment="true"/>
        <visual color="255 255 0" posX="660.0" posY="340.0"/>
        <comment>End</comment>
      </block>
      <block id="3" type="CPU">
        <options displayComment="false"/>
        <visual color="255 255 0" posX="-10.0" posY="-280.0"/>
        <content>//PRZECIĄŻONA METODA ZANURZANIE (2 versja)&#13;;	//N-malejąca liczba elementów kopca &#13;;	function zanurzanie_2(lista,k,N){&#13;;	    while (2*k&lt;=N){&#13;;	        j=2*k&#13;;	        if(j&lt;N&amp;&amp;lista[j]&lt;lista[j+1])&#13;;	            j++&#13;;	        if(lista[k]&gt;=lista[j]) break&#13;;	        pom=lista[k]&#13;;	        lista[k]=lista[j]&#13;;	        lista[j]=pom&#13;;	        k=j&#13;;	    }//end of while&#13;;	}//end of function&#13;;	&#13;;	//      if(!(lista[k]&lt;lista[j])) break))</content>
        <connect ID="4"/>
      </block>
      <block id="4" type="CPU">
        <options displayComment="false"/>
        <visual color="255 255 0" posX="380.0" posY="-280.0"/>
        <content>function utwórzKopiec(abc){&#13;;	    N = abc.length&#13;;	    for(k=N div 2;k&gt;=1;k--){&#13;;	        zanurzenie_1(abc,k)&#13;;	        Writeln(lista)&#13;;	    }&#13;;	}</content>
        <connect ID="5"/>
      </block>
      <block id="5" type="CPU">
        <options displayComment="false"/>
        <visual color="255 255 0" posX="380.0" posY="50.0"/>
        <content>function czyJestKopcem(abc){&#13;;	    dlugosc=abc.length&#13;;	    jestKopcem = true&#13;;	    for(k=1; k&lt;abc.length;k++){&#13;;	        if(2*k&gt;=dlugosc) return true&#13;;	        jestKopcem = abc[k]&gt;=abc[2*k]&#13;;	        if(2*k+1 &gt;= dlugosc) return jestKopcem&#13;;	        jestKopcem=jestKopcem&amp;&amp;abc[k]&gt;=abc[2*k+1]&#13;;	        if (!jestKopcem) return false&#13;;	    }//end of for&#13;;	    return true&#13;;	}</content>
        <connect ID="6"/>
      </block>
      <block id="6" type="CPU">
        <options displayComment="false"/>
        <visual color="255 255 0" posX="-10.0" posY="50.0"/>
        <content>//PRZECIĄŻONA METODA ZANURZANIE (1 versja)&#13;;	function zanurzanie_1(lista,k){&#13;;	    N=lista.length-1&#13;;	    while(2*k&lt;=N){&#13;;	        j=2*k&#13;;	        if(j&lt;N&amp;&amp;lista[j]&lt;lista[j+1])&#13;;	            j++&#13;;	        if(lista[k]&gt;=lista[j]) break&#13;;	        pom=lista[k]&#13;;	        lista[k]=lista[j]&#13;;	        lista[j]=pom&#13;;	        k=j&#13;;	    }//end of while&#13;;	}//end of function&#13;;	&#13;;	//       if(!(lista[k]&lt;lista[j])) break</content>
        <connect ID="7"/>
      </block>
      <block id="7" type="CPU">
        <options displayComment="false"/>
        <visual color="255 255 0" posX="-10.0" posY="340.0"/>
        <content>function sort_prz_kopcowanie(abc){&#13;;	    N = abc.length-1&#13;;	    for (k=Math.floor(N/2); k&gt;=1; k--)&#13;;	        zanurzanie_1(abc, k)&#13;;	    while (N&gt;1){&#13;;	        pom = abc[1]&#13;;	        abc[1] = abc[N]&#13;;	        abc[N--] = pom&#13;;	        zanurzanie_2(abc, 1, N)&#13;;	    }//end of while&#13;;	}//end of sortowanie</content>
        <connect ID="8"/>
      </block>
      <block id="8" type="CPU">
        <options displayComment="false"/>
        <visual color="255 255 0" posX="380.0" posY="340.0"/>
        <content>lista = [0,9,84,7,5,6,5,6,4,3,11,2,1,43,4];	sort_prz_kopcowanie(lista);	Writeln(lista)</content>
        <connect ID="2"/>
      </block>
    </blocks>
  </flowchart>
</JavaBlocks>
